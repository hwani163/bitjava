package step14.ex5;

public class Test2 {

/**  
  오류를 처리하는 방법
  일을 시킨 메서드에서 작업을 하다가 오류가 발생 했을때 어떻게 할 것인가?
  대처법 1: 즉시 실행을 멈춘다.
  대처법 2: 그냥 자기가 처리한다.
  대처법 3: 호출자에게 알린다.
  

 */
//  실습 2 : 오류가 발생했 을 때 method가 대충 처리해 버린다.
//            => 호출자가 모른다. =>제대로 된 대응을 할 수 없다.
  public static void main(String[] args)  {
    MyArrayList2 array = new MyArrayList2();
    for (int i = 0; i < 201; i++) {
      array.add("홍길동 : "+i+" ");
//      만약 add()에서 오류가 발생했음을 알았다면 .....
    }
    
    
//    다음과 같이 오류상황을 유도
//    =>결과 : 즉시 실행을 멈춘다.!! Java에서는 간단히 오류 내용을 출력한다.
    array.print();
    
//    비록 101번째 이름을 등록하다가 오류가 발생하더라도 , 간단히 오류메시지를 출력하고
//    계속 실행한다.
//    => 실습 1에서의 문제를 해결 했다.
    
    
    /*만약
     * MyArrayList2 클래스를 윈도우 프로그래밍 할 때 사용하거나 , 
     * 웹 프로그래밍 할 때 사용한다고 가정하자.
     * 윈도우 프로그램이나 웹 프로그램에서는 오류가 발생했을 때 사용자에게 멧지 상자나 
     * 간단한 창을 띄워서 알려주고 싶을 것이다.
     * MyArrayList2를 지금처럼 콘솔 프로그램을 개발하기 위해 사용 할 때는 문제가 없다.
     * 오류내용이 콘솔로 출력되기 때문이다.
     * 그러나 웹 or 윈도우 프로그램에서 사용할때는 문제가 된다.
     * 개발자는 언제 오류가 발생했는지 알고싶을 것 이다. 그리고 그 오류가 발생했을 때
     * 자신만의 방법으로 사용자에게 알려주고 싶을 것이다.
     * 그런데 MyArrayList2 의 add()에서는 오류가 발생하더라도 호출자에게
     * 알려주지 않기 때문에 , 오류에대한 다른 대응책을 마련할 수 없다.
     * add() 호출자는 add()에서 오류가 발생하더라도 알 길이 없다.
     *왜 ? 안 알려주니까!
     *물론 모든 오류를 호출자에게 알려 줄 필요는 없다.
     *그러나 지금처럼 알려주어야 하는 경우가 있다.*/
    

  }

}
